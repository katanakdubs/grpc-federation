syntax = "proto3";

package federation.v2dev;

import "grpc/federation/federation.proto";
import "google/protobuf/duration.proto";
import "federation/other.proto";

option go_package = "example/federation;federation";

option (grpc.federation.file)= {
  import: ["post/post.proto", "user/user.proto"]
};

service FederationV2devService {
  option (grpc.federation.service) = {
    env {
      var {
        name: "a"
        type { kind: STRING }
        option {
          default: "xxx"
        }
      }
      var {
        name: "b"
        type { repeated { kind: INT64 } }
        option {
          alternate: "yyy"
        }
      }
      var {
        name: "c"
        type { map { key { kind: STRING } value { kind: DURATION } } }
        option {
          required: true
          alternate: "zzz"
        }
      }
      var {
        name: "d"
        type { kind: DOUBLE }
        option {
          ignored: true
        }
      }
    }
    var {
      name: "federation_service_variable"
      by: "1"
    }
  };
  rpc GetPostV2dev(GetPostV2devRequest) returns (GetPostV2devResponse) {};
}

message GetPostV2devRequest {
  string id = 1;
}

enum PostV2devType {
  POST_V2_DEV_TYPE = 0;
}

message GetPostV2devResponse {
  option (grpc.federation.message) = {
    def {
      name: "post"
      message {
        name: "PostV2dev"
        args { name: "id", by: "$.id" }
      }
    }
    def { name: "r" message { name: "Ref" } }
  };
  PostV2dev post = 1 [(grpc.federation.field).by = "post"];
  PostV2devType type = 2 [(grpc.federation.field).by = "PostV2devType.value('POST_V2_DEV_TYPE')"];
  string env_a = 3 [(grpc.federation.field).by = "grpc.federation.env.a"];
  int64 env_b = 4 [(grpc.federation.field).by = "grpc.federation.env.b[1]"];
  google.protobuf.Duration env_c_value = 5 [(grpc.federation.field).by = "grpc.federation.env.c['z']"];
  Ref ref = 6 [(grpc.federation.field).by = "r"];
}

message PostV2dev {
  option (grpc.federation.message) = {
    def [
      {
        name: "res"
        call {
          method: "post.PostService/GetPost"
          request { field: "id", by: "$.id" }
        }
      },
      { name: "post", by: "res.post", autobind: true },
      {
        name: "user"
        message {
          name: "User"
          args { inline: "post" }
        }
      },
      {
        name: "unused"
        message {
          name: "Unused"
          args { name: "foo", by: "'foo'" }
        }
      },
      {
        // without name
        message {
          name: "ForNameless"
          args { name: "bar", by: "'bar'" }
        }
      },
      {
        // assign typed-nil by custom resolver
        name: "typed_nil"
        message {
          name: "TypedNil"
        }
      },
      {
        name: "null_check"
        if: "typed_nil == null" // replace `grpc.federation.cast.null_value(typed_nil) == null` by EvalCEL function
        by: "true"
      },
      {
        if: "typed_nil == null"
        by: "grpc.federation.log.info('output typed_nil', {'result': typed_nil == null})"
      }
    ]
  };
  string id = 1;
  string title = 2;
  string content = 3;
  User user = 4 [(grpc.federation.field).custom_resolver = true];
  bool null_check = 5 [(grpc.federation.field).by = "null_check"];
}

message User {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "user.UserService/GetUser"
        request { field: "id", by: "$.user_id" }
      }
    }
    def { name: "u", by: "res.user" }
    custom_resolver: true
  };
  string id = 1;
  string name = 2 [(grpc.federation.field).custom_resolver = true];
}

message Unused {
  option (grpc.federation.message).custom_resolver = true;
  string foo = 1;
}

message ForNameless {
  option (grpc.federation.message).custom_resolver = true;
  string bar = 1;
}

message TypedNil {
  option (grpc.federation.message).custom_resolver = true;
}